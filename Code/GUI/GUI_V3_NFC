// GUI version 3. Attempting to integrate the NFC reader and the TFT display together. So far unsuccessful
#include <TFT_eSPI.h>
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <SPI.h>
#include <MFRC522.h>

TFT_eSPI tft = TFT_eSPI();

// Define button coordinates and dimensions
#define BUTTON_WIDTH 67
#define BUTTON_HEIGHT 40
#define BUTTON_MARGIN 10

// NFC SPI pins
#define SS_PIN 10               // SDA
#define RST_PIN 19              // RST
#define SCK_PIN 8               // SCK
#define MOSI_PIN 17             // MOSI
#define MISO_PIN 20             // MISO

MFRC522 mfrc522(SS_PIN, RST_PIN); // Create an instance of the MFRC522 class with specified SS and RST pins
String tagID = "";                 // Declare a String variable to store the tag ID

// WiFi credentials
const char *ssid = "TKwifi";
const char *password = "TKcotati.2324";

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

int currentPage = 0;  // Current page index
bool wifiConnected = false;  // Flag to track WiFi connection state
unsigned long wifiStartTime;  // Time when WiFi connection attempt started

// Define button pins
int button1 = 4;
int button2 = 5;
int button3 = 13;
int button4 = 14;

// Define LED pins
int led1 = 46;
int led2 = 9;


void drawButton(int x, int y, const char *label, bool highlighted);
void drawWelcomePage();
void drawCardScannedScreen();
void drawPlugStatusScreen(int plugNumber);
void drawNonFunctioningScreen();
void drawCardTapScreen();
void drawCardDeniedScreen();

void setup() {
  Serial.begin(115200);

  tft.init();  // Initialize the TFT display
  tft.setRotation(1);  // Set rotation for landscape mode
  tft.fillScreen(TFT_BLUE);  // Set the background color to blue

  // Display "Welcome EV Owner!" title in the center
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(3);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Welcome EV Owner!", tft.width() / 2, tft.height() / 2);

  // Draw buttons at the bottom
  drawButton(10, 190, "Plug 1", currentPage == 0);
  drawButton(87, 190, "Plug 2", currentPage == 1);
  drawButton(163, 190, "Plug 3", currentPage == 2);
  drawButton(240, 190, "Plug 4", currentPage == 3);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  wifiStartTime = millis();  // Record the start time of WiFi connection attempt

  while (WiFi.status() != WL_CONNECTED && millis() - wifiStartTime < 30000) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    wifiConnected = true;
  } else {
    Serial.println("Failed to connect to WiFi within 30 seconds");
    drawNonFunctioningScreen();
  }

  // Display "WiFi Connected" in the top left corner on the welcome page
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(1);
  tft.setTextDatum(TL_DATUM);  // Top left align text
  tft.drawString("WiFi Connected", 10, 10);

  // Start NTP
  timeClient.begin();
  timeClient.setTimeOffset(-8 * 3600); // Set time zone offset to UTC-8 (Pacific Time)

  // Initialize button pins
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);

  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);

  digitalWrite(led1, HIGH);
  digitalWrite(led2, HIGH);
  delay(200);
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);

  // Initialize SPI with custom pins
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);  // Begin SPI communication
  mfrc522.PCD_Init();             // Initialize the MFRC522 module
}

void loop() {
  // Update time
  timeClient.update();
  String currentTime = timeClient.getFormattedTime();

  // Extract hours and minutes
  int index = currentTime.indexOf(":");
  String hoursMinutes = currentTime.substring(0, index + 6);

  // Display hours and minutes in the top right corner
  tft.setTextColor(TFT_BLUE);  // Set text color to background color
  tft.setTextSize(2);
  tft.setTextDatum(TR_DATUM);  // Top right align text

  // Clear the area where the previous time was displayed
  delay(500);
  tft.fillRect(tft.width() - 125, 0, 250, 40, TFT_BLUE);

  // Display the new time
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.drawString(hoursMinutes, tft.width() - 10, 10);

  // Check button states and switch pages accordingly
  if (digitalRead(button1) == LOW) {
    currentPage = 1;
  } else if (digitalRead(button2) == LOW) {
    currentPage = 2;
  } else if (digitalRead(button3) == LOW) {
    currentPage = 3;
  } else if (digitalRead(button4) == LOW) {
    currentPage = 4;
  } else {
    currentPage = 0;
  }

  // Draw the appropriate page based on the current index
  switch (currentPage) {
    case 0:
      // Only draw the welcome page if WiFi state changes
      if (!wifiConnected) {
        drawWelcomePage();
        wifiConnected = true;
      }
      break;
    case 1:
      drawPlugStatusScreen(currentPage);
      break;
    case 2:
      drawPlugStatusScreen(currentPage);
      break;
    case 3:
      drawPlugStatusScreen(currentPage);
      break;
    case 4:
      drawPlugStatusScreen(currentPage);
      break;
  }

  // If the current page is not 0 (welcome page), check for NFC card tap
  if (currentPage != 0) {
    drawCardTapScreen();
  }
}

void drawButton(int x, int y, const char *label, bool highlighted) {
  if (highlighted) {
    // Draw highlighting box
    tft.drawRect(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, TFT_WHITE);
  } else {
    // Clear the highlighting box
    tft.fillRect(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, TFT_BLUE);
  }

  // Draw button border
  tft.drawRect(x + 1, y + 1, BUTTON_WIDTH - 2, BUTTON_HEIGHT - 2, TFT_WHITE);
  
  // Draw button background
  tft.fillRect(x + 2, y + 2, BUTTON_WIDTH - 4, BUTTON_HEIGHT - 4, TFT_NAVY);

  // Draw button label
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(1);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString(label, x + BUTTON_WIDTH / 2, y + BUTTON_HEIGHT / 2);
}

void drawPlugStatusScreen(int plugNumber) {
  // Code to draw the screen displaying the status of a plug
  tft.fillScreen(TFT_BLUE);  // Set the background color to green
  tft.setTextColor(TFT_WHITE);  // Set text color to black
  tft.setTextSize(2);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Plug " + String(plugNumber) + " Status:", tft.width() / 2, tft.height() / 2);
  tft.drawString("Energy (kWh):", 150, 170);
  tft.drawString("Elapsed Time:", 150, 195);
  drawChargingAnimation();
  delay(500);
  drawWelcomePage();
}

void drawWelcomePage() {
  // Code to draw the welcome page
  tft.fillScreen(TFT_BLUE);  // Set the background color to blue

  if (WiFi.status() == WL_CONNECTED) {
    // Display "WiFi Connected" in the top left corner
    tft.setTextColor(TFT_WHITE);
    tft.setTextSize(1);
    tft.setTextDatum(TL_DATUM);  // Top left align text
    tft.drawString("WiFi Connected", 10, 10);
  }
  
  // Display "Welcome EV Owner!" title in the center
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(3);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Welcome EV Owner!", tft.width() / 2, tft.height() / 2);

  // Draw buttons at the bottom
  drawButton(10, 190, "Plug 1", currentPage == 0);
  drawButton(87, 190, "Plug 2", currentPage == 1);
  drawButton(163, 190, "Plug 3", currentPage == 2);
  drawButton(240, 190, "Plug 4", currentPage == 3);
}

void drawCardTapScreen() {
  // Code to draw the card tap screen
  tft.fillScreen(TFT_BLUE);  // Set the background color to blue
  
  // Display "Tap your card/chip" message in the center
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(2);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Tap your card/chip please!", tft.width() / 2, tft.height() / 2);

  // Wait for 15 seconds or until trigger condition is met
  unsigned long startTime = millis();
  unsigned long cardTimeout = 15000;  // 15 seconds timeout

  while (millis() - startTime < cardTimeout) {
    readNFC();  // Calling function readNFC
    Serial.println(tagID);  // Used for Testing, Print ID Card

    // Check for the trigger condition
    if (tagID.equals("1c900732") || tagID.equals("2c9e6032")) {
      drawCardScannedScreen();
      delay(3000);  // Wait for 3 seconds on the scanned screen
      drawWelcomePage();  // Return to the welcome page
      break;
    } else if (tagID.equals("faa12668")) {
      drawCardDeniedScreen();
      delay(3000);  // Wait for 3 seconds on the denied screen
      drawWelcomePage();  // Return to the welcome page
      break;
    }

    // Add a short delay to avoid constant checking
    delay(100);
  }

  // If the loop completes without breaking, return to the welcome page
  drawWelcomePage();
}

void drawCardScannedScreen() {
  // Code to draw the screen that says the card has been scanned
  tft.fillScreen(TFT_BLUE);  // Set the background color to black
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(2);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Card Scanned! Thank You!", tft.width() / 2, tft.height() / 2);
  digitalWrite(led1, HIGH);
  delay(750);
  digitalWrite(led1, LOW);
  delay(750);
  digitalWrite(led1, HIGH);
  delay(750);
  digitalWrite(led1, LOW);
  delay(750);
}

void drawNonFunctioningScreen() {
  // Code to draw the non-functioning screen
  tft.fillScreen(TFT_RED);  // Set the background color to red
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(2);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("OUT OF ORDER!", tft.width() / 2, tft.height() / 2);
  digitalWrite(led2, HIGH);
  delay(750);
  digitalWrite(led2, LOW);
  delay(750);
  digitalWrite(led2, HIGH);
  delay(750);
  digitalWrite(led2, LOW);
  delay(750);
  digitalWrite(led2, HIGH);
  delay(750);
  digitalWrite(led2, LOW);
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    drawWelcomePage();
  } else {
    Serial.println("Failed to connect to WiFi");
    drawNonFunctioningScreen();
  }
}

void drawCardDeniedScreen() {
  // Code to draw the "Card/Chip Denied" screen
  tft.fillScreen(TFT_RED);  // Set the background color to red
  tft.setTextColor(TFT_WHITE);  // Set text color to white
  tft.setTextSize(2);  // Set text size
  tft.setTextDatum(MC_DATUM);  // Center align text
  tft.drawString("Card Denied", tft.width() / 2, tft.height() / 2);
  
  digitalWrite(led2, HIGH);
  delay(750);
  digitalWrite(led2, LOW);
  delay(750);
  digitalWrite(led2, HIGH);
  delay(750);
  digitalWrite(led2, LOW);
  delay(750);
}

void drawChargingAnimation() {
  // Initialize the start time for the charging animation
  unsigned long startTime = millis();
  unsigned long animationDuration = 10000;  // 10 seconds
  
  int loadOutlineX = 75;
  int loadOutlineY = 140;
  int loadOutlineWidth = 165;
  int loadOutlineHeight = 15;
  int loadFillWidth = 0;
  int loadFillHeight = 15;
  int loadIncrement = 3;  // Adjust the increment to control the speed of the animation

  // Continuously update the charging animation for 5 seconds
  while (millis() - startTime < animationDuration) {
    // Draw the outline of the loading bar
    tft.drawRect(loadOutlineX, loadOutlineY, loadOutlineWidth, loadOutlineHeight, TFT_WHITE);
    
    // Draw the filled portion of the loading bar
    tft.fillRect(loadOutlineX, loadOutlineY, loadFillWidth, loadFillHeight, TFT_WHITE);
    
    // Increment the width of the filled portion
    loadFillWidth += loadIncrement;

    // If the bar is completely filled, reset it
    if (loadFillWidth >= loadOutlineWidth) {
      loadFillWidth = 0;
      tft.fillRect(loadOutlineX, loadOutlineY, loadOutlineWidth, loadOutlineHeight, TFT_BLUE);
    }

    delay(100);
  }
}

bool readNFC() {
  unsigned long startTime = millis();  // Record the start time
  bool cardRead = false;  // Flag to indicate if a card has been read

  while (millis() - startTime < 10000) {  // Continue checking for cards for up to 10 seconds
    // Look for new cards
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      tagID = getTagID(mfrc522.uid.uidByte, mfrc522.uid.size);  // Get the tag ID and store it in the tagID variable
      cardRead = true;
      break;  // Exit the loop if card is read
    }
  }

  // When card is read wait 1 second
  if (cardRead) {
    delay(1000);
  }
  
  // If card is read return true if card is not read return false
  return cardRead;
}

String getTagID(byte *buffer, byte bufferSize) {
  String tag = "";  // Declare a String variable to store the formatted tag ID
  for (byte i = 0; i < bufferSize; i++) {
    // Format each byte as a two-digit hexadecimal value and append it to the tag variable
    tag += (buffer[i] < 0x10 ? "0" : "") + String(buffer[i], HEX);
  }
  return tag;
}
